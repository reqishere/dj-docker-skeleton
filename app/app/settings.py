"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 3.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

import environ

# Init env variables
env = environ.FileAwareEnv(
	# set casting, default value
	DEBUG=(bool, False)
)
environ.Env.read_env()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env('ALLOWED_HOSTS', list)

INTERNAL_IPS = [
    '127.0.0.1',
    'localhost',
]

# Application definition

INSTALLED_APPS = [
    'whitenoise.runserver_nostatic', # using whitenoise than staticfiles

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'mathfilters',      # init django-mathfilters for template math
    'import_export',	# init django_import_export
    'corsheaders',      # init corsheaders untuk error cors saat development
    'django_icons',     # for django-icons library
    'ckeditor',         # init django-ckeditor
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',       # whitenoise
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',                 # corsheaders
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [str(BASE_DIR.joinpath('templates'))],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media', # make {{MEDIA_URL}} can be used for templates
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

SET_DB = env('SET_DB')      # 'psg' = postgresql, '' = sqlite3

if SET_DB == 'psg' :
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': env('DATABASE_NAME'),
            'USER': env('DATABASE_USER'),
            'PASSWORD': env('DATABASE_PASS'),
            'HOST':  env('DATABASE_HOST'),
            'PORT':  env('DATABASE_PORT'),     # default '5432'
        }
    }
elif SET_DB == 'link' :
    db_link = env('DATABASE_LINK')
    db_from_env = dj_database_url.config(default=db_link, conn_max_age=500, ssl_require=True)
    DATABASES['default'].update(db_from_env)
else :
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGES = [
    ('id', 'Indonesia'),
    ('en-us', 'English'),
]

# default 'UTC'
TIME_ZONE = 'Asia/Ujung_Pandang'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# IMPORT_EXPORT function
IMPORT_EXPORT_USE_TRANSACTIONS = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

STATICFILES_DIRS = [
    ("/static", BASE_DIR / "mystatic"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# django-crispy-forms settings
INSTALLED_APPS += [
    "crispy_forms", # init django-crispy-forms
    "crispy_bulma", # init crispy-bulma for django-crispy-forms but bulma css
]

CRISPY_ALLOWED_TEMPLATE_PACKS = ("bulma",)

CRISPY_TEMPLATE_PACK = "bulma"

# WHITENOISE SETTINGS

WHITENOISE_USE_FINDERS = True
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Corsheaders settings
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOW_CREDENTIALS = False
# CORS_ALLOWED_ORIGIN_REGEXES = ([
#     "http://localhost:1900*", "http://127.0.0.1:1900*"
# ])
CORS_ORIGIN_WHITELIST = ([
    "http://localhost:3000", "http://localhost:8000"
])

if DEBUG == False :
    # secure web from access with http and redirect to https
    SECURE_SSL_REDIRECT = True

    # activate session cookie from network traffic sniffers
    SESSION_COOKIE_SECURE = True

    # secure-only csrf cookie from stealing csrf token
    CSRF_COOKIE_SECURE = True
else :
    # secure web from access with http and redirect to https
    SECURE_SSL_REDIRECT = False

    # activate session cookie from network traffic sniffers
    SESSION_COOKIE_SECURE = False

    # secure-only csrf cookie from stealing csrf token
    CSRF_COOKIE_SECURE = False

# easy-thumbnails and django-filer settings
INSTALLED_APPS += [
    "easy_thumbnails",  # init easy-thumbnails for image processing
    "filer",     # init django-filer
]

THUMBNAIL_HIGH_RESOLUTION = True

THUMBNAIL_PROCESSORS = (
    'easy_thumbnails.processors.colorspace',
    'easy_thumbnails.processors.autocrop',
    'filer.thumbnail_processors.scale_and_crop_with_subject_location',
    'easy_thumbnails.processors.filters'
)

THUMBNAIL_ALIASES = {
    '': {
        'avatar': {'size': (100, 100), 'crop': 'smart' },
        'logo': {'size': (128, 128), 'crop': 'scale', 'upscale': True},
        '1x1': {'size': (768, 768), 'crop': ',0', 'upscale': True },
        'hd': {'size': (1024, 768), 'crop': ',0', 'upscale': True },
        'fhd': {'size': (1366, 768), 'crop': 'smart', 'upscale': True },
    },
}